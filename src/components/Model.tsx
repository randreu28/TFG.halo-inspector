/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: McCarthy3D (https://sketchfab.com/joshuawatt811)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/spartan-armour-mkv-halo-reach-57070b2fd9ff472c8988e76d8c5cbe66
title: Spartan Armour MKV - Halo Reach
*/

import * as THREE from "three";
import { useEffect, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { ThreeEvent, useFrame } from "@react-three/fiber";
import { useSprings } from "@react-spring/web";
import type { Animations, GLTFResult, MatName } from "../types";
import { useSetAtom } from "jotai";
import { matAtom } from "../store";

export function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials, animations } = useGLTF("/halo.glb") as GLTFResult;
  const { actions } = useAnimations<Animations>(animations as any, group);
  const setMat = useSetAtom(matAtom);

  /* Plays animation */
  useEffect(() => {
    actions["Take 001"]?.play();
  }, []);

  /* Makes the materials transparent, so we can play with it's opacity later */
  for (let _mat in materials) {
    let mat = materials[_mat as keyof typeof materials];
    mat.transparent = true;
  }

  /* Creates a state using springs to interpolate the opacities */
  const [opacities, opacitiesOptions] = useSprings(
    Object.keys(materials).length,
    () => ({
      opacity: 1,
    })
  );

  useFrame(() => {
    let i = 0;
    for (let _key in materials) {
      const key = _key as NonNullable<MatName>;
      materials[key].opacity = opacities[i].opacity.get();
      ++i;
    }
  });

  /**
   * Reduces the opacity of every material except the one clicked
   */
  function handleClick(e: ThreeEvent<MouseEvent>) {
    e.stopPropagation();
    let matName: MatName;

    if (e.object instanceof THREE.Mesh) {
      matName = e.object.material.name;
    } else {
      console.error("You didn't click on a Mesh");
      return;
    }

    const arrayMats = Object.values(materials);

    opacitiesOptions.update((i) => ({
      opacity: matName === arrayMats[i].name ? 1 : 0.1,
    }));
    opacitiesOptions.start();
    setMat(matName);
  }

  function handlePointerMissed() {
    opacitiesOptions.update(() => ({
      opacity: 1,
    }));
    opacitiesOptions.start();

    setMat(undefined);
  }

  return (
    <group
      onClick={handleClick}
      onPointerMissed={handlePointerMissed}
      ref={group}
      {...props}
      dispose={null}
    >
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={0.02}
        >
          <group
            name="4757fffebe2a4d47b38143266af5f1a9fbx"
            rotation={[Math.PI / 2, 0, 0]}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group name="group">
                  <group name="Object_7">
                    <primitive object={nodes._rootJoint} />
                    <group name="Object_9" />
                    <group name="Object_11" />
                    <group name="Object_19" />
                    <group name="polySurface436" />
                    <group name="Helmet" />
                    <group name="Armour" />
                    <group name="Armour_LP" />
                    <skinnedMesh
                      name="Object_18"
                      geometry={nodes.Object_18.geometry}
                      material={materials.lambert1}
                      skeleton={nodes.Object_18.skeleton}
                    />
                    <skinnedMesh
                      name="Object_10"
                      geometry={nodes.Object_10.geometry}
                      material={materials.Spartan_Ear_Mat}
                      skeleton={nodes.Object_10.skeleton}
                    />
                    <skinnedMesh
                      name="Object_13"
                      geometry={nodes.Object_13.geometry}
                      material={materials.Spartan_Ear_Mat}
                      skeleton={nodes.Object_13.skeleton}
                    />
                    <skinnedMesh
                      name="Object_17"
                      geometry={nodes.Object_17.geometry}
                      material={materials.Spartan_Shoulders_Mat}
                      skeleton={nodes.Object_17.skeleton}
                    />
                    <skinnedMesh
                      name="Object_12"
                      geometry={nodes.Object_12.geometry}
                      material={materials.Spartan_Helmet_Mat}
                      skeleton={nodes.Object_12.skeleton}
                    />
                    <skinnedMesh
                      name="Object_16"
                      geometry={nodes.Object_16.geometry}
                      material={materials.Spartan_Legs_Mat}
                      skeleton={nodes.Object_16.skeleton}
                    />
                    <skinnedMesh
                      name="Object_20"
                      geometry={nodes.Object_20.geometry}
                      material={materials.Spartan_Undersuit_Mat}
                      skeleton={nodes.Object_20.skeleton}
                    />
                    <skinnedMesh
                      name="Object_15"
                      geometry={nodes.Object_15.geometry}
                      material={materials.Spartan_Arms_Mat}
                      skeleton={nodes.Object_15.skeleton}
                    />
                    <skinnedMesh
                      name="Object_14"
                      geometry={nodes.Object_14.geometry}
                      material={materials.Spartan_Chest_Mat}
                      skeleton={nodes.Object_14.skeleton}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/halo.glb");
